<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="control" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find raven_ros_gazebo)/worlds/ravenII.world"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="physics" value="$(arg physics)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(find raven_ros_gazebo)/urdf/ravenII.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model ravenII -param robot_description"/>

    <!-- if control, use pid controller -->
    <group if="$(arg control)">
        <!-- ros_control launch file for pid controller -->
        <include file="$(find raven_ros_gazebo)/launch/ravenII_control.launch"/>
        <node pkg="raven_ros_gazebo" name="msg_converter_pid"
            type="msg_converter_pid.py" output="screen" />
    </group>

    <!-- if no control, use absolute joint control -->
    <node pkg="raven_ros_gazebo" name="msg_converter_abs"
            type="msg_converter_abs.py" output="screen" unless="$(arg control)"/>

</launch>
